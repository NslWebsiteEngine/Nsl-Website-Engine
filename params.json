{"name":"Nsl-website-engine","tagline":"The ultimative newsocialife.com website engine. Look the examples to see how it's simple to use it.","body":"# NSL Website Engine\r\n\r\nThis engine was originally developed for the new version of New Social Life, which is still in development :). This engine is really powerful, something that you have to try.\r\n\r\n## Features:\r\n\r\n### Router\r\n\r\nThe NSL Website Engine has a fantastic router that you must see. The router supports all the major http router requests like: GET, POST, PUT, DELETE. It supports even routes with Regular expressions and want to ear the new cool thing? You can specify a name for those. Think i'm trolling you? Look the examples. \r\n\r\n```php\r\n<?php\r\n$lib->add(\"router\");\r\n```\r\n\r\nAnd use it with the super intuitive class structure: \r\n\r\n```php\r\n<?php\r\n$lib->add(\"router\");\r\n$lib->router->get(\"\", function() { //the initial / is added automatically if there isn't one\r\n   echo \"I GOT /\";\r\n});\r\n$lib->router->get(\"friend\", function() { //get friend\r\n   echo \"I GOT /friend\";\r\n});\r\n$lib->router->post(\"friend\", function() { //post friend\r\n   echo \"I GOT /friend from POST\";\r\n});\r\n$lib->router->post(\"friend/(\\w+)\", function($friend) { //we gave the (\\w+) regex the name $friend, nice uh?\r\n   echo \"Hello my friend, your name is {$friend}, right?\";\r\n});\r\n$lib->router->all(\"404\", function() { //yes, this is the response for a 404\r\n   echo \"Oops, i don't know what you've requested\";\r\n});\r\n$lib->router->setUrl($_GET[\"url\"]); //You must insert this for compatibility things, we are working on this\r\n// and so on for all the methods.\r\n```\r\n\r\nAttention: the router requires a change in the server configuration, otherwhise you have to input the files in the query string, like index.php?url=/\r\n\r\nA proper configuration for Apache is the .httaccess:  \r\n\r\n```\r\nRewriteEngine On\r\nRewriteBase /\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteRule ^(.*)$ index.php?url=$1 [L,QSA]\r\n```\r\nFor help in the configuration don't hesitate to make an issue containing your http server name.\r\n\r\nEver dreamed to have a class that allows you to check if some GET parameters are set without doing some stupid if checks that takes really much characters? Well the Must class in the Website Engine is for you!\r\n\r\n### Must Fields\r\n\r\n#### GET\r\nLet we suppose your user HAS to fill some get fields, name and email, if the user doesn't fill something he will be noticed.\r\n```\r\n<?php\r\n$lib->add(\"must\");\r\n$lib->must->get([\"name\", \"email\"], function() {\r\n    echo \"Some fields aren't filled in\";\r\n});\r\n```\r\nAnd yes this looks prettier than: \r\n```\r\n<?php\r\nif(!isset($_GET[\"name\"]) || isset($_GET[\"email\"]))\r\n   echo \"Some fields aren't filled in\";\r\n```\r\nIsn't it?\r\n\r\n#### POST\r\nThe same thing can be done with POST\r\n```\r\n<?php\r\n$lib->add(\"must\");\r\n$lib->must->post([\"name\", \"email\"], function() {\r\n    echo \"Some fields aren't filled in\";\r\n});\r\n```\r\nWorks TOO :)\r\n\r\n#### Works for anything\r\nIt works for about anything, even for your own arrays, like this:\r\n```\r\n<?php\r\n$lib->add(\"must\");\r\n$lib->must->handle($myarr, [\"elementx\", \"elementy\"], function() {\r\n    echo \"Some elements aren't set in the array \\$myarr...\";\r\n});\r\n```\r\nYep, it works \r\n\r\n### Function typizer\r\n\r\nThe innovative function typzer allows you to use types in functions, just like in C\r\n\r\n```php\r\n<?php\r\nfunction test(string $a, number $b, mixed $c) {\r\n\tif(is_array($c))\r\n\t\treturn [\"a\"];\r\n\telse\r\n\t\treturn ++$number;\r\n}\r\nfunction test2(number $a, boolean $b) {\r\n\tif($a == 5)\r\n\t\treturn $b;\r\n\treturn false; \r\n}\r\ntest(\"Hello\", 12, []); // returns an array with an element a\r\ntest(\"Hello\", 12.1, false); // return 13.1\r\ntest(\"Hello\", 12.0, false); // return 13.0\r\ntest(12, \"Hello\", false); // THIS ONE THROWS A PHP ERROR\r\ntest2(2, true); // returns false\r\ntest2(5, true); // return true\r\ntest2(5, false); // returns false\r\ntest2(\"hello\", false); // THIS ONE THROWS A PHP ERROR\r\n```\r\n\r\nAND EVEN MORE\r\n\r\n## License\r\nDeveloper: Danny Morabito\r\nYou can use this in your projects but the developers' names HAVE to be in the comment of every file.\r\nThis library uses some things like twig and klein.php, i didn't develop them, so the credits are to their, not mine.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}